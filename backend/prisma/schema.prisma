generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                String               @id @default(uuid())
  username                          String               @unique @db.VarChar(50)
  email                             String               @unique @db.VarChar(100)
  passwordHash                      String               @map("password_hash") @db.VarChar(255)
  avatarUrl                         String?              @map("avatar_url")
  createdAt                         DateTime             @default(now()) @map("created_at")
  updatedAt                         DateTime             @updatedAt @map("updated_at")
  expense_participants              ExpenseParticipant[]
  createdExpenses                   Expense[]            @relation("ExpenseCreator")
  expenses_expenses_payer_idTousers Expense[]            @relation("expenses_payer_idTousers")
  settlementsFrom                   Settlement[]         @relation("SettlementFrom")
  settlementsTo                     Settlement[]         @relation("SettlementTo")
  createdVirtualMembers             TripMember[]         @relation("VirtualMemberCreator")
  tripMemberships                   TripMember[]
  createdTrips                      Trip[]               @relation("TripCreator")

  @@map("users")
}

model Trip {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(100)
  description String?
  startDate   DateTime     @map("start_date")
  endDate     DateTime?    @map("end_date")
  initialFund Decimal      @default(0) @map("initial_fund") @db.Decimal(10, 2)
  currency    String       @default("CNY") @db.VarChar(3)
  createdBy   String       @map("created_by")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  categories  Category[]
  expenses    Expense[]
  settlements Settlement[]
  members     TripMember[]
  creator     User         @relation("TripCreator", fields: [createdBy], references: [id])

  @@map("trips")
}

model TripMember {
  id                 String               @id @default(uuid())
  tripId             String               @map("trip_id")
  userId             String?              @map("user_id")
  role               String               @default("member") @db.VarChar(20)
  joinDate           DateTime             @default(now()) @map("join_date")
  isActive           Boolean              @default(true) @map("is_active")
  isVirtual          Boolean              @default(false) @map("is_virtual")
  displayName        String?              @map("display_name") @db.VarChar(50)
  createdBy          String?              @map("created_by")
  contribution       Decimal              @default(0) @map("contribution") @db.Decimal(10, 2)
  expenseParticipant ExpenseParticipant[]
  paidExpenses       Expense[]
  creator            User?                @relation("VirtualMemberCreator", fields: [createdBy], references: [id])
  trip               Trip                 @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user               User?                @relation(fields: [userId], references: [id])

  @@unique([tripId, userId])
  @@map("trip_members")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  icon      String?   @db.VarChar(50)
  color     String?   @db.VarChar(7)
  tripId    String    @map("trip_id")
  isDefault Boolean   @default(false) @map("is_default")
  trip      Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  expenses  Expense[]

  @@map("categories")
}

model Expense {
  id                             String               @id @default(uuid())
  tripId                         String               @map("trip_id")
  amount                         Decimal              @db.Decimal(10, 2)
  categoryId                     String?              @map("category_id")
  payer_id                       String?
  description                    String?
  expenseDate                    DateTime             @map("expense_date")
  receiptUrl                     String?              @map("receipt_url")
  aiParsedData                   Json?                @map("ai_parsed_data")
  createdBy                      String               @map("created_by")
  createdAt                      DateTime             @default(now()) @map("created_at")
  updatedAt                      DateTime             @updatedAt @map("updated_at")
  isPaidFromFund                 Boolean              @default(false) @map("is_paid_from_fund")
  payerMemberId                  String?              @map("payer_member_id")
  participants                   ExpenseParticipant[]
  category                       Category?            @relation(fields: [categoryId], references: [id])
  creator                        User                 @relation("ExpenseCreator", fields: [createdBy], references: [id])
  users_expenses_payer_idTousers User?                @relation("expenses_payer_idTousers", fields: [payer_id], references: [id])
  payerMember                    TripMember?          @relation(fields: [payerMemberId], references: [id])
  trip                           Trip                 @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model ExpenseParticipant {
  id              String      @id @default(uuid())
  expenseId       String      @map("expense_id")
  user_id         String?
  shareAmount     Decimal?    @map("share_amount") @db.Decimal(10, 2)
  sharePercentage Decimal?    @map("share_percentage") @db.Decimal(5, 2)
  tripMemberId    String?     @map("trip_member_id")
  expense         Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tripMember      TripMember? @relation(fields: [tripMemberId], references: [id])
  users           User?       @relation(fields: [user_id], references: [id])

  @@unique([expenseId, tripMemberId])
  @@unique([expenseId, user_id])
  @@map("expense_participants")
}

model Settlement {
  id         String    @id @default(uuid())
  tripId     String    @map("trip_id")
  fromUserId String    @map("from_user_id")
  toUserId   String    @map("to_user_id")
  amount     Decimal   @db.Decimal(10, 2)
  isSettled  Boolean   @default(false) @map("is_settled")
  settledAt  DateTime? @map("settled_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  fromUser   User      @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUser     User      @relation("SettlementTo", fields: [toUserId], references: [id])
  trip       Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("settlements")
}
