version: '3.8'

# TripSum 生产环境 Docker Compose 配置

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: tripsum-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tripsum}
      POSTGRES_USER: ${POSTGRES_USER:-tripsum_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tripsum_password}
      POSTGRES_INIT_DB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - tripsum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tripsum_user} -d ${POSTGRES_DB:-tripsum}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: tripsum-redis
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - tripsum-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli $([ -n \"$REDIS_PASSWORD\" ] && echo \"-a $REDIS_PASSWORD\") ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: tripsum-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-tripsum_user}:${POSTGRES_PASSWORD:-tripsum_password}@postgres:5432/${POSTGRES_DB:-tripsum}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-30d}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      CLIENT_URL: ${CLIENT_URL}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - tripsum-network
    command: |
      sh -c "
        npx prisma migrate deploy &&
        npm start
      "

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    container_name: tripsum-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - tripsum-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: tripsum-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tripsum-network

networks:
  tripsum-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local